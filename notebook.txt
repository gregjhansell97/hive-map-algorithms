
--------------------------------------------------------------------------------
2/23/20 - Troy, NY - Thoughts on Publishers:
should a publisher be able to receive messages:
* I don't think they should because a publisher is going to be the
    weakest link in the network with the most SWaP dependence so it should do
    as little as possible. There would be some benefits to publisher having
    back-and-forth communication with routers/subscribers such as error
    detection; in a way that goes against the pub-sub paradigm. If a publisher
    publishes something, it shouldn't are what is listening. 
* To consider failurs: what if there ar eno subscribers? message-id
    conflicts? matching message id from othe rmessages? no acks received? other
    messages publishing (don't flood network...)
* What if nodes look for surounding nodes to find an identity, like
    a local (neighboring) agreement on a unique id...
* I want to leave the routing to the routing nodes, I think it's 
    their responsibility... the publisher should be a lazy (low power) as
    possible
--------------------------------------------------------------------------------
3/15/2020 - Killington, VT - Meta-level

I want to log more information and thoughts via keyboard rather than notebook.
To that end, this log file will track all of these ideas/problems/issues that
I confront while making hive-map. Expect the format here with a data, location
and topic put in the header
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
3/15/2020 - Killington, VT - IPC

I wanted to get a transceivers to communicate over processes. I was planning on
using multiprocessing queues provided, but I want some added flexibility of
creating and removing more queues on the fly. It seems that these
multiprocessing qs must be created before processes are forked. I created a zmq
model where publishers push to a broker and then the broker publishes the
information to subscribers. I'm worried about he slow joiner problem but
optimistic that over ipc this isn't as much as a problem (as over tcp...)
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
3/15/2020 - Killington, VT - IPC

Man I forgot how annoying dealing with ZMQ contexts were, also the slow joiner
problem complicated my implementations. I found I was using sleeps and figured
that was not a good way to go about that, so went back on my implementation and
created inter-process-queues yet again. This time there is a factory object
called a broker that creates the transceivers, and once the broker starts up
no more transceivers can be made. This implementation is good enough to get
some benchmarks on (fingers crossed). I need to add hooks that track messages
sent
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
3/15/2020 - Killington, VT - Benchmark Transceiver

What do I want in a BenchmarkTransceiver (BT). The BT should be able to:
- monitor how many messages were sent and at what transmission intensity.
- verifying message success rate is not the job of the Transceiver
- the transceiver should be able to adjust its range of communication, 
- successful reception of a message adjustable probability
- highwater marks for both send and receive q's 
- broadcast delays
- change location (thereby connections)
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
3/16/2020 - Killington, VT - IPCTransceiver

I was optimistic in using transceivers over multiple process, but it would
appear that i/o is painfully slow with nodes over 500, and with nodes over 1000
there are os issues related to scaling. I switched over to threads, and that
brought a speed up, but still not perfect. I was doing some more research and I
think asyncio may be the right choice, especially if I remove the centralized
broker, and just provide queues directly to the components, this has the added
advantage of being in the same memory space (can check range before adding
values to the Q)
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
3/16/2020 - Killington, VT - Transceiver

I switched over to asyncio for broadcasting messages and I was very impressed,
I was able to simulate interactions of 1000 in a reasonable amount of time which
was not observed for both threads and processes. Threads still worked but was
much slower and processes had an os error (something about too many semaphores).
These are still useful transceivers though so I'm keeping them archived for now.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
3/16/2020 - Killington, VT - Next Steps

So I have a good setup for transceivers. I'm planning on changing gears after a
long(ish) break:
1. tackle leprechaun simulation; I want to have it running without any pub-sub
    library. Goal is to have a leprechaun chasing a pot of gold, the user can
    move both the leprechaun and the pot of gold. When the leprechaun moves it
    leaves a rainbow behind it...
2. get tests for algorithms squared away (using newly designed transceivers)
3. design first benchmark before BenchmarkTransceiver is made: just a bunch of
    nodes (not moving) and some are broadcasting messages and others are
    subscribed to these broadcasts
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
3/17/2020 - Killington, VT - Transceivers

I've been giving Transceivers more thought, and they should have a filter option
where meta data is provided and hooks are in place to drop messages if metadata
does not meet the requirements. Requirements could be range, so if a message
only wants to be broadcasted in a certain radius or only on main roads thats
where it will be deliverd - should that be integrated with publish as a form of
topic? Like topic and relevance kind of stuff... so you may be subscribed to a
topic but its relevance is important to you like where the topic is being
published from... but then that becomes a pub/sub/router problem though perhaps
it can be implemented on a transceiver levela

ALSO lets run callbacks from subscribe and logging information in a threadpool,
I was reading up on asyncio's run_in_executor which I wish I knew about for
earlier projects
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
3/17/2020 - Killington, VT - Logging

Transceivers:
- on message reception
    - transceiver in question
    - receiving strength
    - message
    - context
    - cpu time
- on message transmission
    - transceiver in question
    - transmit strength
    - message
    - context
    - cpu time
- on subscription
    - transceiver in question
    - who subscribed
    - cpu time

Transceiver.Callback (covers Router and Subscriber)
- on invocation
    - whether data was relevant
    - cpu time
    - data
    - context
    - transceiver calling invocation
    - Callback in question (Router or Suscriber)

Publisher
- on publish
    - self
    - data 
    - context

Subscriber
- on message delivery
    - trx
    - data
    - context
    - time
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
3/18/2020 - Killington, VT - Logging

This has never been about transceivers or even logging! The real thing I want
to record are a snap-shot of publishers, subscribers and routers at a point in
time, these snapshots may include things related to the publisher, subscriber
and routers (like transceivers). New interface called Loggable which forces
subsclasses to implement logging functions
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
3/18/2020 - Killington, VT - context vs topic

I've been thinking about these two terms a lot. Topic is a subset of context,
so if a publisher published to a certan topic, then the context of the message
would be that its for that specific topic. Subscribers would look at the
context (thereby the topic) to see if its relevant for them to deliver. I'm
trying to introduce the idea in the implementation: if relevant then publish
otherwise dont, also if subscriber is overriden one can modify relevant and 
on_recv to handle new context... 

I'm just imagining contexts where the user requests that a certain radius be
met or number of hops, kinda keeping that customization up to the developers,
also the context may be different for various transceiver, lets say one
transceiver is location based and the other is connection oriented how are to
merge together context across the two?

ALSO how is a subscriber supposed to indicate to a router what context its
interested in: this may be prudent for certain algorithms that take in this
information ahead of time
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
3/18/2020 - Killington, VT - context vs topic

So I've thought some more about this topic/context thing, and although context
offers greater flexibility, certain (low-level) systems may have limited support
for contexts, so I want to have contexts as just topics for algorithms but have
the option for the developer to explor more "complicated" arrangements if they
want to override that behavior

Honestly a lot of that behavior can be enforced just on a Transceiver level, so
if "they" wanted to make custom transceivers that receive information a certain
way and transmit it a different way (so like num-hops, or range) and drop it 
if it doesn't meet these requirements that up to the Transceiver, but at the
same time what if that varies from different topics like what if one topic you
wanted a lot of range, I guess you could adjust the transceiver yourself before
publishing

So yeah thats the solution I guess: Transceivers can handle most of the context
stuff and make those descisions which also keeps context consistent across 
varying transceivers: A transceiver of a certain type can only communicate with
types capable of handling its context stuff. I realize this is super confusing,
let me try to put in in simpler words:

Subscriber, Router and Publisher use transceivers. Transceivers are the
entrypoint for receiving data and exitpoint for transmitting data. A transceiver
could receive data that has "meta" information (ex: context). Then when it
passes that along to a Router or Subscriber, its expected to get context
backout

If a developer wants to
incorporate some sort of context where only certain nodes are can receive a
message then in their transceiver implementation they receive data w 
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
3/18/2020 - Killington, VT - context vs topic (post run clarity)

Topics very abstractly represent context. Context is more complicated and not
the focus of the algorithms I'm try to implement. I'm gonna keep it simple with
topics for benchmarks and then rexplore the idea when I get to implementing
it as a real system (so soon... but not right now)
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
3/23/2020 - Killington, VT - ROS2

I'm choosing to demo ros2 instead of ros1 because:
1. ros2 runs python3
2. ros2 signifies the direction that the community wants to take
3. New projects will likely look into ros2 over ros because of the two reasons
    above

Playing devils advocate, ros1 is likely more well documented and it may be
easier to find community support for it... with that said, the task requested
of people is not so hard that they'll need to do a lot of searching outside
of the ros2 documentation
--------------------------------------------------------------------------------


